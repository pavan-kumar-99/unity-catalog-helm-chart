server: 
  # Create UC Server for Unity Catalog
  create: true
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: greypavan/unity-catalog
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "main"

  # This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
  # This is to override the chart name.
  nameOverride: ""
  fullnameOverride: ""
  # Custom config
  conf:
    createCustomConfig: true

    log4j2: |-
      status = warn
      appenders = rollingFile

      appender.rollingFile.type = RollingFile
      appender.rollingFile.name = RollingFile
      appender.rollingFile.fileName = etc/logs/server.log
      appender.rollingFile.filePattern = etc/logs/server-%d{MM-dd-yyyy-HH-mm-ss}-%i.log.gz
      appender.rollingFile.layout.type = PatternLayout
      appender.rollingFile.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

      appender.rollingFile.policies.type = Policies
      appender.rollingFile.policies.time.type = TimeBasedTriggeringPolicy
      appender.rollingFile.policies.time.interval = 1
      appender.rollingFile.policies.size.type = SizeBasedTriggeringPolicy
      appender.rollingFile.policies.size.size = 10MB

      appender.rollingFile.strategy.type = DefaultRolloverStrategy
      appender.rollingFile.strategy.max = 5
      appender.rollingFile.strategy.fileIndex = max

      appender.rollingFile.strategy.action.type = Delete
      appender.rollingFile.strategy.action.basePath = etc/logs
      appender.rollingFile.strategy.action.condition.type = IfFileName
      appender.rollingFile.strategy.action.condition.glob = server-*.log.gz
      appender.rollingFile.strategy.action.ifAny.type = IfAccumulatedFileCount
      appender.rollingFile.strategy.action.ifAny.exceeds = 5

      rootLogger.level = info
      rootLogger.appenderRefs = rollingFile
      rootLogger.appenderRef.rollingFile.ref = RollingFile
    hibernate: |-
        hibernate.connection.driver_class=org.h2.Driver
        hibernate.connection.url=jdbc:h2:file:./etc/db/h2db;DB_CLOSE_DELAY=-1
        hibernate.hbm2ddl.auto=update
        hibernate.show_sql=false
        hibernate.archive.autodetection=class
        hibernate.use_sql_comments=true
        org.hibernate.SQL=INFO
        org.hibernate.type.descriptor.sql.BasicBinder=TRACE
    server: |-
        server.env=dev
        ## Identity Provider authorization parameters
        # examples:
        # authorization=enable
        # authorization-url=https://accounts.google.com/o/oauth2/auth
        # token-url=https://oauth2.googleapis.com/token
        # client-id=111122223333-abab1212cdcd3434.apps.googleusercontent.com
        # client-secret=GOCSPX-ababfoobarcdcd-5q
        server.authorization=disable
        server.authorization-url=
        server.token-url=
        server.client-id=
        server.client-secret=
        server.redirect-port=
        # D-Days H-Hours M-Minutes S-Seconds (P5D = 5 days,PT5H = 5 hours, PT5M = 5 minutes, PT5S = 5 seconds)
        server.cookie-timeout=P5D

        # Define the model storage root.  Cloud storage or file based allowed.
        # If no root specified, the current working directory of the server is used.

        #storage-root.models=s3://my-s3-bucket/root
        #storage-root.models=abfs://file_system@account_name.dfs.core.windows.net/root
        #storage-root.models=gs://my-gc-bucket/root
        storage-root.models=file:/tmp/ucroot

        ## S3 Storage Config (Multiple configs can be added by incrementing the index)
        s3.bucketPath.0=
        s3.region.0=
        s3.awsRoleArn.0=
        # Optional (If blank, it will use DefaultCredentialsProviderChain)
        s3.accessKey.0=
        s3.secretKey.0=
        # Test Only (If you provide a session token, it will just use those session creds, no downscoping)
        s3.sessionToken.0=

        ## ADLS Storage Config (Multiple configs can be added by incrementing the index)
        adls.storageAccountName.0=
        adls.tenantId.0=
        adls.clientId.0=
        adls.clientSecret.0=

        ## GCS Storage Config (Multiple configs can be added by incrementing the index)
        gcs.bucketPath.0=
        # Optional (If blank, it will use Default Application chain to find credentials)
        gcs.jsonKeyFilePath.0=

  #This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 8080

  # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    periodSeconds: 60
    timeoutSeconds: 10
    httpGet:
      path: /
      port: http
  readinessProbe:
    periodSeconds: 60
    timeoutSeconds: 10
    httpGet:
      path: /
      port: http

  #This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}


ui:
  # Create Web UI for Unity Catalog
  create: true
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: greypavan/unity-catalog-ui
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "main"

  # This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
  # This is to override the chart name.
  nameOverride: ""
  fullnameOverride: ""

  #This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 3000

  # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http

  #This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}
